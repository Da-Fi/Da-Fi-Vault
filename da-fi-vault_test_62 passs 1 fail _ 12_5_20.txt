=====================================================
platform linux -- Python 3.8.5, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'brownie-verbose' -> verbosity=2, deadline=None, max_examples=50, stateful_step_count=10, report_multiple_bugs=False, database=DirectoryBasedExampleDatabase(PosixPath('/home/nocode326/.brownie/hypothesis'))
rootdir: /home/nocode326/brownie/da-fi-vault
plugins: eth-brownie-1.12.1, forked-1.3.0, web3-5.11.1, cov-2.10.1, hypothesis-5.41.3, xdist-1.34.0
[gw0] linux Python 3.8.5 cwd: /home/nocode326/brownie/da-fi-vault
[gw1] linux Python 3.8.5 cwd: /home/nocode326/brownie/da-fi-vault
[gw2] linux Python 3.8.5 cwd: /home/nocode326/brownie/da-fi-vault
[gw3] linux Python 3.8.5 cwd: /home/nocode326/brownie/da-fi-vault
[gw3] Python 3.8.5 (default, Jul 28 2020, 12:59:40)  -- [GCC 9.3.0]
[gw1] Python 3.8.5 (default, Jul 28 2020, 12:59:40)  -- [GCC 9.3.0]
[gw0] Python 3.8.5 (default, Jul 28 2020, 12:59:40)  -- [GCC 9.3.0]
[gw2] Python 3.8.5 (default, Jul 28 2020, 12:59:40)  -- [GCC 9.3.0]
gw0 [63] / gw1 [63] / gw2 [63] / gw3 [63]
scheduling tests via LoadFileScheduling

tests/functional/strategy/test_misc.py::test_harvest_tend_authority 
tests/functional/strategy/test_migration.py::test_good_migration 
tests/functional/strategy/test_fees.py::test_performance_fees 
tests/functional/strategy/test_config.py::test_strategy_deployment 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_deployment 
tests/functional/strategy/test_config.py::test_strategy_setEmergencyExit 
[gw1] PASSED tests/functional/strategy/test_fees.py::test_performance_fees 
tests/functional/strategy/test_fees.py::test_zero_fees 
[gw2] PASSED tests/functional/strategy/test_misc.py::test_harvest_tend_authority 
[gw0] PASSED tests/functional/strategy/test_migration.py::test_good_migration 
tests/functional/strategy/test_misc.py::test_harvest_tend_trigger 
tests/functional/strategy/test_migration.py::test_bad_migration 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_setEmergencyExit 
tests/functional/strategy/test_config.py::test_strategy_setParams[strategist-setStrategist-gov-None] 
[gw1] PASSED tests/functional/strategy/test_fees.py::test_zero_fees 
tests/functional/strategy/test_rate_limit.py::test_simple_limit 
[gw0] PASSED tests/functional/strategy/test_migration.py::test_bad_migration 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_setParams[strategist-setStrategist-gov-None] 
[gw2] PASSED tests/functional/strategy/test_misc.py::test_harvest_tend_trigger 
tests/functional/strategy/test_config.py::test_strategy_setParams[rewards-setRewards-strategist-None] 
tests/functional/strategy/test_shutdown.py::test_emergency_shutdown 
tests/functional/strategy/test_misc.py::test_sweep 
[gw1] PASSED tests/functional/strategy/test_rate_limit.py::test_simple_limit 
tests/functional/strategy/test_rate_limit.py::test_zero_limit 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_setParams[rewards-setRewards-strategist-None] 
tests/functional/strategy/test_config.py::test_strategy_setParams[keeper-setKeeper-strategist-None] 
[gw1] PASSED tests/functional/strategy/test_rate_limit.py::test_zero_limit 
tests/functional/strategy/test_startup.py::test_startup 
[gw2] PASSED tests/functional/strategy/test_misc.py::test_sweep 
tests/functional/strategy/test_misc.py::test_reject_ether 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_setParams[keeper-setKeeper-strategist-None] 
tests/functional/strategy/test_config.py::test_strategy_setParams[minReportDelay-setMinReportDelay-strategist-1000] 
[gw2] PASSED tests/functional/strategy/test_misc.py::test_reject_ether 
tests/functional/vault/test_config.py::test_vault_deployment 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_setParams[minReportDelay-setMinReportDelay-strategist-1000] 
tests/functional/strategy/test_config.py::test_strategy_setParams[profitFactor-setProfitFactor-strategist-1000] 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_deployment 
tests/functional/vault/test_config.py::test_vault_name_symbol_override 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_name_symbol_override 
tests/functional/vault/test_config.py::test_vault_setParams[name-setName-NewName yVault] 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_setParams[profitFactor-setProfitFactor-strategist-1000] 
tests/functional/strategy/test_config.py::test_strategy_setParams[debtThreshold-setDebtThreshold-strategist-1000] 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[name-setName-NewName yVault] 
tests/functional/vault/test_config.py::test_vault_setParams[symbol-setSymbol-yvNEW] 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[symbol-setSymbol-yvNEW] 
tests/functional/vault/test_config.py::test_vault_setParams[emergencyShutdown-setEmergencyShutdown-True] 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategy_setParams[debtThreshold-setDebtThreshold-strategist-1000] 
tests/functional/strategy/test_config.py::test_strategist_update 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[emergencyShutdown-setEmergencyShutdown-True] 
tests/functional/vault/test_config.py::test_vault_setParams[guardian-setGuardian-None] 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[guardian-setGuardian-None] 
[gw3] PASSED tests/functional/strategy/test_config.py::test_strategist_update 
tests/functional/vault/test_config.py::test_vault_setParams[rewards-setRewards-None] 
tests/functional/vault/test_permit.py::test_permit[True] 
[gw0] PASSED tests/functional/strategy/test_shutdown.py::test_emergency_shutdown 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[rewards-setRewards-None] 
tests/functional/vault/test_config.py::test_vault_setParams[performanceFee-setPerformanceFee-1000] 
[gw3] PASSED tests/functional/vault/test_permit.py::test_permit[True] 
tests/functional/strategy/test_shutdown.py::test_emergency_exit 
tests/functional/vault/test_permit.py::test_permit[False] 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[performanceFee-setPerformanceFee-1000] 
tests/functional/vault/test_config.py::test_vault_setParams[managementFee-setManagementFee-1000] 
[gw3] PASSED tests/functional/vault/test_permit.py::test_permit[False] 
tests/functional/vault/test_permit.py::test_permit_wrong_signature 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[managementFee-setManagementFee-1000] 
tests/functional/vault/test_config.py::test_vault_setParams[depositLimit-setDepositLimit-1000] 
[gw3] PASSED tests/functional/vault/test_permit.py::test_permit_wrong_signature 
tests/functional/vault/test_permit.py::test_permit_expired 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setParams[depositLimit-setDepositLimit-1000] 
tests/functional/vault/test_config.py::test_vault_setGovernance 
[gw3] PASSED tests/functional/vault/test_permit.py::test_permit_expired 
tests/functional/vault/test_strategies.py::test_addStrategy 
[gw2] PASSED tests/functional/vault/test_config.py::test_vault_setGovernance 
[gw3] PASSED tests/functional/vault/test_strategies.py::test_addStrategy 
tests/functional/vault/test_withdrawal.py::test_multiple_withdrawals 
tests/functional/vault/test_strategies.py::test_updateStrategy 
[gw3] PASSED tests/functional/vault/test_strategies.py::test_updateStrategy 
tests/functional/vault/test_strategies.py::test_migrateStrategy 
[gw1] PASSED tests/functional/strategy/test_startup.py::test_startup 
tests/functional/vault/test_losses.py::test_losses 
[gw3] PASSED tests/functional/vault/test_strategies.py::test_migrateStrategy 
tests/functional/vault/test_strategies.py::test_revokeStrategy 
[gw2] PASSED tests/functional/vault/test_withdrawal.py::test_multiple_withdrawals 
[gw1] PASSED tests/functional/vault/test_losses.py::test_losses 
tests/functional/vault/test_withdrawal.py::test_forced_withdrawal 
tests/functional/vault/test_misc.py::test_regular_available_deposit_limit 
[gw3] PASSED tests/functional/vault/test_strategies.py::test_revokeStrategy 
tests/functional/vault/test_strategies.py::test_ordering 
[gw0] PASSED tests/functional/strategy/test_shutdown.py::test_emergency_exit 
[gw1] PASSED tests/functional/vault/test_misc.py::test_regular_available_deposit_limit 
tests/functional/vault/test_misc.py::test_negative_available_deposit_limit 
tests/functional/strategy/test_withdrawal.py::test_withdraw 
[gw1] PASSED tests/functional/vault/test_misc.py::test_negative_available_deposit_limit 
tests/functional/vault/test_misc.py::test_sweep 
[gw0] PASSED tests/functional/strategy/test_withdrawal.py::test_withdraw 
[gw2] PASSED tests/functional/vault/test_withdrawal.py::test_forced_withdrawal 
tests/functional/vault/test_shares.py::test_deposit_with_zero_funds 
[gw1] PASSED tests/functional/vault/test_misc.py::test_sweep 
tests/functional/vault/test_withdrawal.py::test_progressive_withdrawal 
tests/functional/vault/test_misc.py::test_reject_ether 
[gw0] PASSED tests/functional/vault/test_shares.py::test_deposit_with_zero_funds 
tests/functional/vault/test_shares.py::test_deposit_with_wrong_amount 
[gw0] FAILED tests/functional/vault/test_shares.py::test_deposit_with_wrong_amount 
tests/functional/vault/test_shares.py::test_deposit_with_guest_list 
[gw0] PASSED tests/functional/vault/test_shares.py::test_deposit_with_guest_list 
tests/functional/vault/test_shares.py::test_deposit_all_and_withdraw_all 
[gw2] PASSED tests/functional/vault/test_withdrawal.py::test_progressive_withdrawal 
tests/functional/vault/test_withdrawal.py::test_withdrawal_with_empty_queue 
[gw1] PASSED tests/functional/vault/test_misc.py::test_reject_ether 
[gw0] PASSED tests/functional/vault/test_shares.py::test_deposit_all_and_withdraw_all 
tests/functional/vault/test_shares.py::test_deposit_withdraw 
[gw2] PASSED tests/functional/vault/test_withdrawal.py::test_withdrawal_with_empty_queue 
[gw0] PASSED tests/functional/vault/test_shares.py::test_deposit_withdraw 
tests/functional/vault/test_shares.py::test_deposit_limit 
[gw0] PASSED tests/functional/vault/test_shares.py::test_deposit_limit 
[gw3] PASSED tests/functional/vault/test_strategies.py::test_ordering 
tests/functional/vault/test_shares.py::test_delegated_deposit_withdraw 
tests/functional/vault/test_strategies.py::test_reporting 
[gw3] PASSED tests/functional/vault/test_strategies.py::test_reporting 
[gw0] PASSED tests/functional/vault/test_shares.py::test_delegated_deposit_withdraw 
tests/functional/vault/test_shares.py::test_emergencyShutdown 
[gw0] PASSED tests/functional/vault/test_shares.py::test_emergencyShutdown 
tests/functional/vault/test_shares.py::test_transfer 
[gw0] PASSED tests/functional/vault/test_shares.py::test_transfer 
tests/functional/vault/test_shares.py::test_transferFrom 
[gw0] PASSED tests/functional/vault/test_shares.py::test_transferFrom Error in atexit._run_exitfuncs:
Traceback (most recent call last):
  File "/home/nocode326/.local/lib/python3.8/site-packages/brownie/project/main.py", line 349, in _load_deployment_map
    deployment_map = json.load(fp)
  File "/usr/lib/python3.8/json/__init__.py", line 293, in load
    return loads(fp.read(),
  File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.8/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)


=========================================================================== FAILURES ============================================================================
________________________________________________________________ test_deposit_with_wrong_amount _________________________________________________________________
[gw0] linux -- Python 3.8.5 /usr/bin/python3

vault = <Vault Contract '0x602C71e4DAC47a042Ee7f46E0aee17F94A3bA0B6'>, token = <Token Contract '0x3194cBDC3dbcd3E11a07892e7bA5c3394048Cc87'>
gov = <Account '0x66aB6D9362d4F35596279692F0251Db635165871'>

    def test_deposit_with_wrong_amount(vault, token, gov):
        balance = token.balanceOf(gov) + 1
        token.approve(vault, 2 ** 256 - 1, {"from": gov})
        with brownie.reverts():
>           vault.deposit(balance, {"from": gov})

tests/functional/vault/test_shares.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/functional/vault/test_shares.py:27: in test_deposit_with_wrong_amount
    vault.deposit(balance, {"from": gov})
../../.local/lib/python3.8/site-packages/eth_event/main.py:271: in decode_traceTransaction
    "data": _decode(topic_map[topics[0]]["inputs"], topics[1:], data),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

inputs = [{'indexed': True, 'internalType': 'address', 'name': 'from', 'type': 'address'}, {'indexed': True, 'internalType': 'a..., 'name': 'to', 'type': 'address'}, {'indexed': True, 'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256'}]
topics = ['0x0000000000000000000000000000000000000000000000000000000000000000', '0x00000000000000000000000066ab6d9362d4f35596279692f0251db635165871']
data = '0x00000000000000000000000000000000000000000000065a4da25d3016c00001'

    def _decode(inputs: List, topics: List, data: str) -> List:
        indexed_count = len([i for i in inputs if i["indexed"]])
    
        if indexed_count and not topics:
            # special case - if the ABI has indexed values but the log does not,
            # we should still be able to decode the data
            unindexed_types = inputs
    
        else:
            if indexed_count < len(topics):
                raise EventError(
                    "Event log does not contain enough topics for the given ABI - this"
                    " is usually because an event argument is not marked as indexed"
                )
            if indexed_count > len(topics):
>               raise EventError(
                    "Event log contains more topics than expected for the given ABI - this is"
                    " usually because an event argument is incorrectly marked as indexed"
                )
E               eth_event.main.EventError: Event log contains more topics than expected for the given ABI - this is usually because an event argument is incorrectly marked as indexed

../../.local/lib/python3.8/site-packages/eth_event/main.py:306: EventError
======================================================================= warnings summary ========================================================================
tests/functional/strategy/test_config.py::test_strategy_deployment
tests/functional/strategy/test_fees.py::test_performance_fees
tests/functional/strategy/test_misc.py::test_harvest_tend_authority
tests/functional/strategy/test_migration.py::test_good_migration
tests/functional/strategy/test_misc.py::test_sweep
  /home/nocode326/.local/lib/python3.8/site-packages/brownie/network/event.py:234: UserWarning: Event log contains more topics than expected for the given ABI - this is usually because an event argument is incorrectly marked as indexed
    warnings.warn(str(exc))

-- Docs: https://docs.pytest.org/en/stable/warnings.html
==================================================================== short test summary info ====================================================================
FAILED tests/functional/vault/test_shares.py::test_deposit_with_wrong_amount - eth_event.main.EventError: Event log contains more topics than expected for the...
=